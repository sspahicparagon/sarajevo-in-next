generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model groupe {
  GroupeID Int        @id @default(autoincrement())
  Name     String     @db.VarChar(255)
  Visible  Boolean    @default(dbgenerated("(b'1')")) @db.Bit(1)
  location location[]
}

model location {
  LocationID  Int        @id @default(autoincrement())
  Name        String?    @db.VarChar(255)
  Phone       String?    @db.VarChar(255)
  Website     String?    @db.VarChar(255)
  Image       String     @db.VarChar(1023)
  GroupeID    Int?
  CreatedAt   DateTime   @default(now()) @db.DateTime(0)
  Adresa      String?    @db.VarChar(255)
  Latitude    String?    @db.VarChar(255)
  Longitude   String?    @db.VarChar(255)
  Description String?    @db.VarChar(2048)
  event       event[]
  groupe      groupe?    @relation(fields: [GroupeID], references: [GroupeID], onDelete: Cascade, map: "Location_GroupeID")
  worktime    worktime[]

  @@index([GroupeID], map: "GroupeID")
}

model trackimage {
  TrackImageID Int    @id @default(autoincrement())
  Image        String @db.VarChar(255)
}

model worktime {
  WorkTimeID Int      @id @default(autoincrement())
  DayOfWeek  Int
  OpenTime   DateTime @db.Time(0)
  CloseTime  DateTime @db.Time(0)
  LocationID Int
  location   location @relation(fields: [LocationID], references: [LocationID], onDelete: Cascade, map: "WorkTime_LocationID")

  @@index([LocationID], map: "LocationID")
}

model event {
  EventID           Int                 @id @default(autoincrement())
  Name              String?             @db.VarChar(255)
  Time              String?             @db.VarChar(255)
  Date              DateTime            @default(now()) @db.DateTime(0)
  Price             Decimal             @default(0.00) @db.Decimal(5, 2)
  Image             String              @db.VarChar(1023)
  LocationID        Int?
  recurring_rule    String?             @db.Text
  location          location?           @relation(fields: [LocationID], references: [LocationID], onDelete: Cascade, map: "Event_LocationID")
  event_translation event_translation[]

  @@index([LocationID], map: "LocationID")
}

model event_translation {
  EventTranslationID Int    @id @default(autoincrement())
  EventID            Int
  Language           String @db.VarChar(5)
  Key                String @db.VarChar(255)
  Translation        String @db.VarChar(2048)
  event              event  @relation(fields: [EventID], references: [EventID], onDelete: Cascade, map: "EventTranslation_EventID")

  @@index([EventID], map: "EventTranslation_EventID")
}

model custom_ad {
  CustomAdID     Int            @id @default(autoincrement())
  EndDate        DateTime       @db.DateTime(0)
  Image          String         @db.VarChar(1023)
  Name           String         @db.VarChar(255)
  Url            String?        @db.VarChar(1023)
  Order          Int
  CustomAdTypeID Int
  CreatedAt      DateTime       @default(now()) @db.DateTime(0)
  EditedAt       DateTime?      @db.DateTime(0)
  custom_ad_type custom_ad_type @relation(fields: [CustomAdTypeID], references: [CustomAdTypeID], onDelete: Cascade, map: "CustomAd_CustomAdTypeID")

  @@index([CustomAdTypeID], map: "CustomAd_CustomAdTypeID")
}

model custom_ad_type {
  CustomAdTypeID Int         @id @default(autoincrement())
  Width          String      @db.VarChar(15)
  Height         String      @db.VarChar(15)
  custom_ad      custom_ad[]
}
